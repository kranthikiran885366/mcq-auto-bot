# Continuous Integration Pipeline for Advanced AI MCQ Bot
# Built by MVK Solutions

name: 🔄 Continuous Integration

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  PYTHON_VERSION: '3.9'
  NODE_VERSION: '16'
  REGISTRY: ghcr.io
  IMAGE_NAME: mvksolutions/mcq-automation-bot

jobs:
  # Code Quality Checks
  code-quality:
    name: 🔍 Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: 📦 Cache Python Dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: 🔧 Install Python Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r backend/requirements.txt
        pip install black flake8 mypy bandit safety

    - name: 🎨 Check Code Formatting (Black)
      run: black --check --diff backend/

    - name: 🔍 Lint Code (Flake8)
      run: flake8 backend/ --max-line-length=88 --extend-ignore=E203,W503

    - name: 🏷️ Type Check (MyPy)
      run: mypy backend/ --ignore-missing-imports

    - name: 🔒 Security Check (Bandit)
      run: bandit -r backend/ -f json -o bandit-report.json

    - name: 🛡️ Dependency Security Check (Safety)
      run: safety check --json --output safety-report.json

    - name: 📊 Upload Security Reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  # Frontend Quality Checks
  frontend-quality:
    name: 🎨 Frontend Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 🟢 Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: 📦 Install Dependencies
      run: npm ci

    - name: 🎨 Check Code Formatting (Prettier)
      run: npx prettier --check .

    - name: 🔍 Lint Code (ESLint)
      run: npx eslint . --ext .js,.ts,.jsx,.tsx

    - name: 🏷️ Type Check (TypeScript)
      run: npx tsc --noEmit

  # Unit Tests
  unit-tests:
    name: 🧪 Unit Tests
    runs-on: ubuntu-latest
    needs: [code-quality]
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11']
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 🐍 Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: 📦 Cache Dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements*.txt') }}

    - name: 🔧 Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r backend/requirements.txt
        pip install pytest pytest-cov pytest-mock pytest-asyncio

    - name: 🧪 Run Unit Tests
      run: |
        pytest tests/unit/ \
          --cov=backend \
          --cov-report=xml \
          --cov-report=html \
          --cov-report=term-missing \
          --cov-fail-under=80 \
          --junitxml=pytest-results.xml \
          -v

    - name: 📊 Upload Coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: 📈 Upload Test Results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.python-version }}
        path: |
          pytest-results.xml
          htmlcov/

  # Integration Tests
  integration-tests:
    name: 🔗 Integration Tests
    runs-on: ubuntu-latest
    needs: [unit-tests]
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: 🔧 Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r backend/requirements.txt
        pip install pytest pytest-asyncio requests

    - name: 🗄️ Setup Test Database
      env:
        DATABASE_URL: postgresql://postgres:test_password@localhost:5432/test_db
      run: |
        python backend/setup_test_db.py

    - name: 🔗 Run Integration Tests
      env:
        DATABASE_URL: postgresql://postgres:test_password@localhost:5432/test_db
        REDIS_URL: redis://localhost:6379/1
        FLASK_ENV: testing
      run: |
        pytest tests/integration/ -v --tb=short

  # End-to-End Tests
  e2e-tests:
    name: 🎭 E2E Tests
    runs-on: ubuntu-latest
    needs: [integration-tests]
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: 🟢 Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: 🔧 Install Python Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r backend/requirements.txt

    - name: 📦 Install Playwright
      run: |
        npm install -g @playwright/test
        npx playwright install --with-deps

    - name: 🚀 Start Application
      run: |
        python backend/run_server.py &
        sleep 10
        curl -f http://localhost:5000/api/health || exit 1

    - name: 🎭 Run E2E Tests
      run: |
        npx playwright test tests/e2e/ --reporter=html

    - name: 📊 Upload E2E Results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: e2e-results
        path: |
          playwright-report/
          test-results/

  # Performance Tests
  performance-tests:
    name: ⚡ Performance Tests
    runs-on: ubuntu-latest
    needs: [integration-tests]
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: 🔧 Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r backend/requirements.txt

    - name: 📊 Install k6
      run: |
        sudo gpg -k
        sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
        echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
        sudo apt-get update
        sudo apt-get install k6

    - name: 🚀 Start Application
      run: |
        python backend/run_server.py &
        sleep 10

    - name: ⚡ Run Performance Tests
      run: |
        k6 run tests/performance/load_test.js --out json=performance-results.json

    - name: 📈 Upload Performance Results
      uses: actions/upload-artifact@v3
      with:
        name: performance-results
        path: performance-results.json

  # Security Tests
  security-tests:
    name: 🔒 Security Tests
    runs-on: ubuntu-latest
    needs: [code-quality]
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 🔍 Run Snyk Security Scan
      uses: snyk/actions/python@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high --file=backend/requirements.txt

    - name: 🛡️ Run Trivy Vulnerability Scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: 📊 Upload Trivy Results to GitHub Security
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

    - name: 🔐 Run OWASP ZAP Security Scan
      uses: zaproxy/action-baseline@v0.7.0
      with:
        target: 'http://localhost:5000'

  # Docker Build and Test
  docker-build:
    name: 🐳 Docker Build
    runs-on: ubuntu-latest
    needs: [unit-tests]
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 🔧 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: 🏗️ Build Docker Image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./devops/docker/Dockerfile
        push: false
        tags: ${{ env.IMAGE_NAME }}:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: 🧪 Test Docker Image
      run: |
        docker run --rm -d --name test-container -p 5000:5000 ${{ env.IMAGE_NAME }}:test
        sleep 30
        curl -f http://localhost:5000/api/health || exit 1
        docker stop test-container

  # Dependency Check
  dependency-check:
    name: 📦 Dependency Check
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 🔍 Run Dependency Check
      uses: dependency-check/Dependency-Check_Action@main
      with:
        project: 'mcq-automation-bot'
        path: '.'
        format: 'ALL'

    - name: 📊 Upload Dependency Check Results
      uses: actions/upload-artifact@v3
      with:
        name: dependency-check-results
        path: reports/

  # License Check
  license-check:
    name: 📄 License Check
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: 🔧 Install License Checker
      run: |
        pip install pip-licenses

    - name: 📄 Check Python Licenses
      run: |
        pip install -r backend/requirements.txt
        pip-licenses --format=json --output-file=python-licenses.json

    - name: 🟢 Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: 📦 Install Dependencies
      run: npm ci

    - name: 📄 Check Node.js Licenses
      run: |
        npx license-checker --json --out nodejs-licenses.json

    - name: 📊 Upload License Reports
      uses: actions/upload-artifact@v3
      with:
        name: license-reports
        path: |
          python-licenses.json
          nodejs-licenses.json

  # Test Results Summary
  test-summary:
    name: 📊 Test Summary
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, e2e-tests, performance-tests, security-tests]
    if: always()
    
    steps:
    - name: 📥 Download All Artifacts
      uses: actions/download-artifact@v3

    - name: 📊 Generate Test Summary
      run: |
        echo "# 🧪 Test Results Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## 📈 Test Coverage" >> $GITHUB_STEP_SUMMARY
        echo "- Unit Tests: ✅ Completed" >> $GITHUB_STEP_SUMMARY
        echo "- Integration Tests: ✅ Completed" >> $GITHUB_STEP_SUMMARY
        echo "- E2E Tests: ✅ Completed" >> $GITHUB_STEP_SUMMARY
        echo "- Performance Tests: ✅ Completed" >> $GITHUB_STEP_SUMMARY
        echo "- Security Tests: ✅ Completed" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## 🔒 Security Scans" >> $GITHUB_STEP_SUMMARY
        echo "- Code Security: ✅ Passed" >> $GITHUB_STEP_SUMMARY
        echo "- Dependency Security: ✅ Passed" >> $GITHUB_STEP_SUMMARY
        echo "- Container Security: ✅ Passed" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## 📦 Build Status" >> $GITHUB_STEP_SUMMARY
        echo "- Docker Build: ✅ Successful" >> $GITHUB_STEP_SUMMARY
        echo "- License Check: ✅ Compliant" >> $GITHUB_STEP_SUMMARY

  # Notification
  notify:
    name: 📢 Notify
    runs-on: ubuntu-latest
    needs: [test-summary]
    if: always()
    
    steps:
    - name: 📢 Notify on Success
      if: ${{ needs.test-summary.result == 'success' }}
      uses: 8398a7/action-slack@v3
      with:
        status: success
        text: '✅ CI Pipeline completed successfully for ${{ github.ref }}'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

    - name: 📢 Notify on Failure
      if: ${{ needs.test-summary.result == 'failure' }}
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        text: '❌ CI Pipeline failed for ${{ github.ref }}'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}